#!/usr/bin/env node
var debug = require('debug')('server');
var app = require('../app');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});
//MongoDB add, using mongoose
//trying someting
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('../routes/index');
var usersRouter = require('../routes/users');

var app = express();
//var app = require('express')();

// view engine setup was set inplace of use
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(express.static(path.join(__dirname, 'public')));

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use('/', indexRouter);
app.use('/users', usersRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
//fin here
var mongoose = require("mongoose");
var dbUrl = "mongodb://heroku_rkk9fh3h:9ni9okpduof7mnqmfndv242cok@ds135456.mlab.com:35456/heroku_rkk9fh3h";

mongoose.connect(dbUrl,{useNewUrlParser: true}, (err) => { 
  console.log("mongodb connected", err);
});

var Message = mongoose.model("App",{status : String, why : String});


app.get("/messages", (req, res) => {
  Message.find({},(err, app)=> {
    res.send(app);
  });
});

app.post("/messages", (req, res) => {
  var appStat = new Message(req);
  appStat.save((err) =>{
    if(err)
      sendStatus(500);
    res.sendStatus(200);
  });
});

var io = require("socket.io").listen(server);

io.on("connection", function(socket){
  console.log("Client Connected");

  socket.on("stateChanged", function(state){
    console.log("State Changed: " + state);
    io.emit("updateState", state);
  });
});